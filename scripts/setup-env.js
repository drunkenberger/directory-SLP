#!/usr/bin/env node

/**
 * This script helps set up environment variables for Directory SLP.
 * It checks for required environment variables and creates a .env.local file
 * if needed.
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const { exec } = require('child_process');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const requiredVars = [
  { 
    name: 'NEXT_PUBLIC_SUPABASE_URL',
    description: 'Your Supabase project URL (e.g., https://example.supabase.co)'
  },
  { 
    name: 'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    description: 'Your Supabase anonymous API key (starts with "eyJ")'
  },
  { 
    name: 'SUPABASE_SERVICE_ROLE_KEY',
    description: 'Your Supabase service role key (admin privileges, starts with "eyJ")'
  },
  { 
    name: 'STRIPE_SECRET_KEY',
    description: 'Your Stripe secret key (starts with "sk_")'
  },
  { 
    name: 'STRIPE_PUBLIC_KEY',
    description: 'Your Stripe publishable key (starts with "pk_")'
  }
];

// Path to .env.local file
const envPath = path.join(process.cwd(), '.env.local');

// Helper function to prompt for input
function prompt(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// Check if .env.local exists and read it
async function checkExistingEnv() {
  try {
    if (fs.existsSync(envPath)) {
      const envContent = fs.readFileSync(envPath, 'utf8');
      const envVars = {};
      
      envContent.split('\n').forEach((line) => {
        if (line && !line.startsWith('#')) {
          const match = line.match(/^([^=]+)=(.*)$/);
          if (match) {
            const key = match[1].trim();
            const value = match[2].trim().replace(/^["'](.*)["']$/, '$1');
            envVars[key] = value;
          }
        }
      });
      
      return envVars;
    }
  } catch (error) {
    console.error('Error reading existing .env.local file:', error);
  }
  
  return {};
}

// Main function
async function main() {
  console.log('Directory SLP Environment Setup');
  console.log('==============================');
  console.log('This script will help you set up required environment variables.');
  console.log('');
  
  const existingVars = await checkExistingEnv();
  const newVars = {};
  let changesMade = false;
  
  for (const varInfo of requiredVars) {
    const varName = varInfo.name;
    const existing = existingVars[varName] || process.env[varName];
    
    console.log(`\n${varInfo.description}:`);
    if (existing) {
      const masked = existing.substring(0, 4) + '...' + existing.substring(existing.length - 4);
      const keep = await prompt(`Found ${varName} (${masked}). Keep this value? (Y/n): `);
      
      if (keep.toLowerCase() !== 'n') {
        newVars[varName] = existing;
        console.log(`Using existing value for ${varName}`);
        continue;
      }
    }
    
    const value = await prompt(`Enter ${varName}: `);
    if (value) {
      newVars[varName] = value;
      changesMade = true;
    } else if (existing) {
      newVars[varName] = existing;
    } else {
      console.log(`Warning: ${varName} is required but no value was provided.`);
    }
  }
  
  if (changesMade || !fs.existsSync(envPath)) {
    // Format the .env file content
    let envContent = '# Directory SLP Environment Variables\n';
    envContent += '# Generated by setup-env.js\n\n';
    
    envContent += '# Supabase configuration\n';
    envContent += `NEXT_PUBLIC_SUPABASE_URL=${newVars.NEXT_PUBLIC_SUPABASE_URL || ''}\n`;
    envContent += `NEXT_PUBLIC_SUPABASE_ANON_KEY=${newVars.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''}\n`;
    envContent += `SUPABASE_SERVICE_ROLE_KEY=${newVars.SUPABASE_SERVICE_ROLE_KEY || ''}\n\n`;
    
    envContent += '# Stripe configuration\n';
    envContent += `STRIPE_SECRET_KEY=${newVars.STRIPE_SECRET_KEY || ''}\n`;
    envContent += `STRIPE_PUBLIC_KEY=${newVars.STRIPE_PUBLIC_KEY || ''}\n`;
    
    // Write to .env.local
    fs.writeFileSync(envPath, envContent);
    console.log('\nEnvironment variables saved to .env.local');
    
    // Check if running in development
    console.log('\nTo apply these changes, restart your development server:');
    console.log('  npm run dev');
  } else {
    console.log('\nNo changes made to environment variables.');
  }
  
  rl.close();
}

// Run the main function
main().catch(error => {
  console.error('Error:', error);
  rl.close();
  process.exit(1);
}); 